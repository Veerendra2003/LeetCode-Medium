/*
235. Lowest Common Ancestor of a Binary Search Tree
Medium
9K
251
Companies
Given a binary search tree (BST), find the lowest common ancestor (LCA) node of two given nodes in the BST.

According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).”

 

Example 1:


Input: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8
Output: 6
Explanation: The LCA of nodes 2 and 8 is 6.
Example 2:


Input: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4
Output: 2
Explanation: The LCA of nodes 2 and 4 is 2, since a node can be a descendant of itself according to the LCA definition.
Example 3:

Input: root = [2,1], p = 2, q = 1
Output: 2
 

Constraints:

The number of nodes in the tree is in the range [2, 105].
-109 <= Node.val <= 109
All Node.val are unique.
p != q
p and q will exist in the BST.
*/
=========================================================================================================================
SOLUTIOIN IN JAVA:
===================
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */

class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        ArrayList<TreeNode> arrp = new ArrayList();
        ArrayList<TreeNode> arrq = new ArrayList();
        Stack<TreeNode> s = new Stack();

        TreeNode temp = root;     
        while(temp!=null){
            if(temp.val == p.val)
            {
                arrp.add(temp);
                break;
            }
            else if(temp.val>p.val)
            {
                arrp.add(temp);
                temp = temp.left;                
            }
            else
            {
                arrp.add(temp);
                temp = temp.right;
            }
        }   
        temp = root;     
        while(temp!=null){
            if(temp.val == q.val)
            {
                arrq.add(temp);
                break;
            }
            else if(temp.val>q.val)
            {
                arrq.add(temp);
                temp = temp.left;                
            }
            else
            {
                arrq.add(temp);
                temp = temp.right;
            }
        }  
        int i=0,j=0; 
        TreeNode res = null;
        while(i<arrp.size() && j<arrq.size())
        {
            if(arrp.get(i).val==arrq.get(j).val)
            {
                res = arrp.get(i);
                i++;
                j++;
            }
            else
                break;
        }
        return res;
    }
}
